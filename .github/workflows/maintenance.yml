name: Dependency Updates & Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to apply'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - all

jobs:
  # Check for outdated dependencies
  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './phisnet/package-lock.json'

      - name: Check for outdated packages
        id: check
        working-directory: ./phisnet
        run: |
          # Check for outdated packages
          npm outdated --json > outdated.json || true
          
          # Check if there are updates
          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo "📦 Found outdated dependencies:"
            cat outdated.json | jq '.'
          else
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "✅ All dependencies are up to date"
          fi

      - name: Upload outdated report
        if: steps.check.outputs.has-updates == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: outdated-dependencies
          path: ./phisnet/outdated.json

  # Update dependencies
  dependency-update:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: dependency-check
    if: needs.dependency-check.outputs.has-updates == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './phisnet/package-lock.json'

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Update dependencies based on type
        working-directory: ./phisnet
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'patch' }}"
          
          case $UPDATE_TYPE in
            "patch")
              echo "🔧 Updating patch versions..."
              npx npm-check-updates -u --target patch
              ;;
            "minor")
              echo "🔧 Updating minor versions..."
              npx npm-check-updates -u --target minor
              ;;
            "major")
              echo "🔧 Updating major versions..."
              npx npm-check-updates -u --target major
              ;;
            "all")
              echo "🔧 Updating all versions..."
              npx npm-check-updates -u
              ;;
          esac

      - name: Install updated dependencies
        working-directory: ./phisnet
        run: |
          npm install
          npm audit fix --audit-level moderate || true

      - name: Run tests after update
        working-directory: ./phisnet
        run: |
          # Run type checking
          npm run check
          
          # Run build to ensure everything compiles
          npm run build
          
          # Run tests if available
          if grep -q '"test"' package.json; then
            npm test
          fi

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies (${{ github.event.inputs.update_type || 'patch' }})'
          title: '🔧 Dependency Updates (${{ github.event.inputs.update_type || 'patch' }})'
          body: |
            ## 📦 Dependency Updates
            
            This PR updates dependencies based on the **${{ github.event.inputs.update_type || 'patch' }}** update strategy.
            
            ### Changes
            - Updated dependencies to their latest compatible versions
            - Fixed any security vulnerabilities with `npm audit fix`
            - Verified that the application still builds and passes tests
            
            ### Testing
            - ✅ TypeScript compilation passes
            - ✅ Application builds successfully
            - ✅ Tests pass (if available)
            
            **Auto-generated by GitHub Actions** 📱
          branch: chore/dependency-updates
          delete-branch: true

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './phisnet/package-lock.json'

      - name: Install dependencies
        working-directory: ./phisnet
        run: npm ci

      - name: Run security audit
        working-directory: ./phisnet
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level high --output json > audit-report.json || true
          
          # Check if there are high/critical vulnerabilities
          if [ -s audit-report.json ]; then
            HIGH_VULNS=$(cat audit-report.json | jq '.metadata.vulnerabilities.high // 0')
            CRITICAL_VULNS=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
            
            if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "⚠️ Found $HIGH_VULNS high and $CRITICAL_VULNS critical vulnerabilities"
              echo "::warning::Security vulnerabilities found: $HIGH_VULNS high, $CRITICAL_VULNS critical"
            else
              echo "✅ No high or critical vulnerabilities found"
            fi
          fi

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: ./phisnet/audit-report.json

  # Clean up old artifacts and caches
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
              const createdAt = new Date(artifact.created_at);
              const thirtyDaysAgo = new Date();
              thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
              return createdAt < thirtyDaysAgo;
            });
            
            for (const artifact of oldArtifacts) {
              console.log(`Deleting old artifact: ${artifact.name}`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }

  # Performance monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './phisnet/package-lock.json'

      - name: Install dependencies
        working-directory: ./phisnet
        run: npm ci

      - name: Analyze bundle size
        working-directory: ./phisnet
        run: |
          npm run build
          
          # Check bundle sizes
          echo "📊 Bundle size analysis:"
          du -h dist/ | sort -hr
          
          # Check for large dependencies
          echo "📦 Largest dependencies:"
          npm ls --depth=0 --prod --parseable | xargs du -sh | sort -hr | head -10

      - name: Check performance metrics
        working-directory: ./phisnet
        run: |
          # Start the application
          npm run start &
          APP_PID=$!
          
          # Wait for startup
          sleep 15
          
          # Install and run lighthouse
          npm install -g lighthouse
          lighthouse http://localhost:3000 --output=json --output-path=performance-report.json --chrome-flags="--headless --no-sandbox"
          
          # Stop the application
          kill $APP_PID

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-monitoring-report
          path: ./phisnet/performance-report.json

  # Health check
  health-check:
    name: Repository Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check repository health
        run: |
          echo "🏥 Repository Health Check"
          
          # Check for common files
          echo "📄 Checking for essential files..."
          files=("README.md" "LICENSE" ".gitignore" "package.json")
          for file in "${files[@]}"; do
            if [ -f "phisnet/$file" ] || [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file missing"
            fi
          done
          
          # Check for security files
          echo "🔒 Checking for security files..."
          security_files=(".github/SECURITY.md" "SECURITY.md")
          for file in "${security_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
              break
            fi
          done
          
          # Check for documentation
          echo "📚 Checking documentation..."
          if [ -d "docs" ] || [ -d "phisnet/docs" ]; then
            echo "✅ Documentation directory exists"
          else
            echo "⚠️ No documentation directory found"
          fi

      - name: Create health report
        run: |
          echo "📊 Repository health summary" > health-report.md
          echo "Generated: $(date)" >> health-report.md
          echo "" >> health-report.md
          
          # Add more health checks here
          echo "All checks completed ✅" >> health-report.md

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: repository-health-report
          path: health-report.md
