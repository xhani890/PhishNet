name: Release & Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi
          
          # Set output
          {
            echo 'CHANGELOG<<EOF'
            cat CHANGELOG.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: PhishNet ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}

  # Build Release Assets
  build-release-assets:
    name: Build Release Assets
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './phisnet/package-lock.json'

      - name: Install dependencies
        working-directory: ./phisnet
        run: npm ci

      - name: Build application
        working-directory: ./phisnet
        run: npm run build

      - name: Create source archive
        run: |
          tar -czf phishnet-${{ github.ref_name }}-source.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=dist \
            --exclude=coverage \
            --exclude=playwright-report \
            --exclude=test-results \
            phisnet/

      - name: Create build archive
        run: |
          cd phisnet
          tar -czf ../phishnet-${{ github.ref_name }}-build.tar.gz dist/

      - name: Upload source archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./phishnet-${{ github.ref_name }}-source.tar.gz
          asset_name: phishnet-${{ github.ref_name }}-source.tar.gz
          asset_content_type: application/gzip

      - name: Upload build archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./phishnet-${{ github.ref_name }}-build.tar.gz
          asset_name: phishnet-${{ github.ref_name }}-build.tar.gz
          asset_content_type: application/gzip

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: |
      (startsWith(github.ref, 'refs/tags/v') && contains(github.ref_name, '-')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.phishnet.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment variables
        run: |
          echo "DEPLOY_VERSION=${{ github.event.inputs.version || github.ref_name || 'latest' }}" >> $GITHUB_ENV
          echo "DEPLOY_ENV=staging" >> $GITHUB_ENV

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying PhishNet ${{ env.DEPLOY_VERSION }} to staging..."
          
          # Example deployment steps:
          # 1. SSH into staging server
          # 2. Pull latest Docker images
          # 3. Update docker-compose configuration
          # 4. Restart services
          # 5. Run health checks
          
          # Placeholder deployment script
          cat > deploy-staging.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Setting up staging deployment..."
          
          # Update docker-compose for staging
          docker-compose -f docker-compose.yml -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Health check
          curl -f http://localhost:3000/health || exit 1
          
          echo "✅ Staging deployment completed successfully!"
          EOF
          
          chmod +x deploy-staging.sh
          # ./deploy-staging.sh

      - name: Run staging tests
        run: |
          echo "🧪 Running staging smoke tests..."
          # Add staging-specific tests here

      - name: Notify deployment
        run: |
          echo "📢 Staging deployment notification"
          # Add Slack/Discord/Email notification here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: |
      (startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name, '-')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://phishnet.app
    needs: [create-release, build-release-assets]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment variables
        run: |
          echo "DEPLOY_VERSION=${{ github.event.inputs.version || github.ref_name || 'latest' }}" >> $GITHUB_ENV
          echo "DEPLOY_ENV=production" >> $GITHUB_ENV

      - name: Production deployment checklist
        run: |
          echo "📋 Pre-deployment checklist:"
          echo "✅ Release created: ${{ needs.create-release.outputs.release_id }}"
          echo "✅ Assets built and uploaded"
          echo "✅ Environment: ${{ env.DEPLOY_ENV }}"
          echo "✅ Version: ${{ env.DEPLOY_VERSION }}"

      - name: Deploy to production
        run: |
          echo "🚀 Deploying PhishNet ${{ env.DEPLOY_VERSION }} to production..."
          
          # Example production deployment steps:
          # 1. Create database backup
          # 2. Deploy with blue-green strategy
          # 3. Run database migrations
          # 4. Update load balancer
          # 5. Run comprehensive health checks
          
          # Placeholder deployment script
          cat > deploy-production.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Setting up production deployment..."
          
          # Backup database
          echo "Creating database backup..."
          # pg_dump commands here
          
          # Blue-green deployment
          echo "Starting blue-green deployment..."
          
          # Update production configuration
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          sleep 60
          
          # Comprehensive health checks
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:3000/api/health || exit 1
          
          echo "✅ Production deployment completed successfully!"
          EOF
          
          chmod +x deploy-production.sh
          # ./deploy-production.sh

      - name: Run production smoke tests
        run: |
          echo "🧪 Running production smoke tests..."
          # Add production-specific tests here

      - name: Update deployment status
        run: |
          echo "📊 Updating deployment status..."
          # Update deployment tracking systems

      - name: Notify successful deployment
        run: |
          echo "🎉 Production deployment successful!"
          echo "Version: ${{ env.DEPLOY_VERSION }}"
          echo "Environment: ${{ env.DEPLOY_ENV }}"
          echo "URL: https://phishnet.app"
          # Add success notifications here

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (contains(github.event_name, 'workflow_dispatch'))
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Rollback deployment
        run: |
          echo "🔄 Rolling back deployment for ${{ github.event.inputs.environment }}"
          # Add rollback logic here
          
      - name: Notify rollback
        run: |
          echo "⚠️ Rollback completed for ${{ github.event.inputs.environment }}"
          # Add rollback notifications here
