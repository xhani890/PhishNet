name: PhishNet CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'phisnet/**'
      - '.github/workflows/**'
      - 'package*.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'phisnet/**'
      - '.github/workflows/**'
      - 'package*.json'

# Automatically cancel previous runs for the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  # CI Database Configuration (different from local)
  POSTGRES_DB: phishnet_test
  POSTGRES_USER: phishnet_user
  POSTGRES_PASSWORD: test_password
  # Local development uses: db=phishnet, user=postgres, password=kali

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Verify package-lock.json exists
        working-directory: ./phisnet
        run: |
          if [ ! -f "package-lock.json" ]; then
            echo "package-lock.json not found, running npm install to generate it"
            npm install --package-lock-only
          fi

      - name: Install dependencies
        working-directory: ./phisnet
        run: npm ci --prefer-offline

      - name: Run TypeScript check
        working-directory: ./phisnet
        run: npm run check

      - name: Check for linting issues
        working-directory: ./phisnet
        run: |
          # Add eslint if configured, otherwise skip
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
            npx eslint . --ext .ts,.tsx,.js,.jsx
          else
            echo "No ESLint configuration found, skipping linting"
          fi

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./phisnet
        run: npm ci

      - name: Build application
        working-directory: ./phisnet
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ./phisnet/dist/
            ./phisnet/client/dist/
          retention-days: 1
          if-no-files-found: warn

  # Database Tests
  database-tests:
    name: Database Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./phisnet
        run: npm ci

      - name: Setup environment variables
        working-directory: ./phisnet
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Run database migrations
        working-directory: ./phisnet
        run: npm run db:push

      - name: Run database setup
        working-directory: ./phisnet
        run: |
          if [ -f "scripts/import-data.ts" ]; then
            npm run import-data
          fi

  # Unit Tests (if any)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./phisnet
        run: npm ci

      - name: Run unit tests
        working-directory: ./phisnet
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            npm test
          else
            echo "No unit tests configured, skipping"
          fi

  # End-to-End Tests with Playwright (Only run on main branch, not PRs)
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [build, database-tests]
    # Only run E2E tests on main branch to save minutes
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./phisnet
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./phisnet
        run: npx playwright install chromium --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./phisnet/

      - name: Setup environment variables
        working-directory: ./phisnet
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}" >> .env
          echo "NODE_ENV=test" >> .env
          echo "PORT=3000" >> .env

      - name: Setup database
        working-directory: ./phisnet
        run: |
          npm run db:push
          if [ -f "scripts/import-data.ts" ]; then
            npm run import-data
          fi

      - name: Start application
        working-directory: ./phisnet
        run: |
          npm run start &
          sleep 10
          curl -f http://localhost:3000 || exit 1

      - name: Run Playwright tests
        working-directory: ./phisnet
        run: npx playwright test --project=chromium

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: ./phisnet/playwright-report/
          retention-days: 3

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./phisnet
        run: npm ci

      - name: Run npm audit
        working-directory: ./phisnet
        run: |
          npm audit --audit-level=high || echo "Audit completed with warnings"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './phisnet'
          format: 'table'

  # Docker Build and Push (Only on main branch pushes, not PRs)
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build, unit-tests]
    # Only build Docker images on main branch pushes (not PRs or other branches)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/phishnet
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./phisnet
          file: ./phisnet/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deployment (if applicable)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy notification
        run: |
          echo "🚀 Deployment would happen here"
          echo "Latest image: ${{ needs.docker-build.outputs.image-tag }}"
          # Add your deployment steps here
          # For example: kubectl apply, docker-compose up, etc.
