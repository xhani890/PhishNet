import { useState } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { Loader2, FolderInput, Download, Bold, Italic, Underline, Link, Image } from "lucide-react";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

const templateSchema = z.object({
  name: z.string().min(1, "Template name is required"),
  subject: z.string().min(1, "Subject line is required"),
  senderName: z.string().min(1, "Sender name is required"),
  senderEmail: z.string().email("Please enter a valid email"),
  htmlContent: z.string().min(1, "Email content is required"),
});

type TemplateFormValues = z.infer<typeof templateSchema>;

interface TemplateEditorProps {
  template?: any;
  onClose: () => void;
}

export default function TemplateEditor({ template, onClose }: TemplateEditorProps) {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [previewMode, setPreviewMode] = useState(false);
  
  const form = useForm<TemplateFormValues>({
    resolver: zodResolver(templateSchema),
    defaultValues: template ? {
      name: template.name,
      subject: template.subject,
      senderName: template.senderName,
      senderEmail: template.senderEmail,
      htmlContent: template.htmlContent,
    } : {
      name: "",
      subject: "",
      senderName: "",
      senderEmail: "",
      htmlContent: "<div style=\"font-family: Arial, sans-serif;\">\n  <h2 style=\"color: #333;\">Your Email Title</h2>\n  <p style=\"color: #666;\">Dear {{.FirstName}},</p>\n  <p style=\"color: #666;\">Your email content here...</p>\n  <p style=\"margin: 20px 0; text-align: center;\">\n    <a href=\"{{.TrackingURL}}\" style=\"background-color: #0070e0; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; display: inline-block;\">Click Here</a>\n  </p>\n  <p style=\"color: #666; margin-top: 20px;\">Thank you,<br>{{.SenderName}}</p>\n</div>",
    },
  });

  const isEditing = !!template;

  const mutation = useMutation({
    mutationFn: async (data: TemplateFormValues) => {
      const url = isEditing 
        ? `/api/email-templates/${template.id}` 
        : "/api/email-templates";
      const method = isEditing ? "PUT" : "POST";
      const res = await apiRequest(method, url, data);
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: `Template ${isEditing ? 'updated' : 'created'}`,
        description: `Your email template has been ${isEditing ? 'updated' : 'created'} successfully.`,
      });
      queryClient.invalidateQueries({ queryKey: ['/api/email-templates'] });
      onClose();
    },
    onError: (error) => {
      toast({
        title: `Error ${isEditing ? 'updating' : 'creating'} template`,
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const handleImportHTML = () => {
    const input = document.createElement("input");
    input.type = "file";
    input.accept = ".html";
    input.onchange = (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (event) => {
          const content = event.target?.result as string;
          form.setValue("htmlContent", content);
        };
        reader.readAsText(file);
      }
    };
    input.click();
  };

  const handleExportHTML = () => {
    const htmlContent = form.getValues("htmlContent");
    const blob = new Blob([htmlContent], { type: "text/html" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${form.getValues("name") || "template"}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  };

  function onSubmit(data: TemplateFormValues) {
    mutation.mutate(data);
  }

  return (
    <div className="flex flex-col h-full">
      <div className="text-lg font-medium border-b pb-4">
        {isEditing ? "Edit Email Template" : "Create Email Template"}
      </div>
      
      <div className="flex-1 mt-4 flex flex-col sm:flex-row divide-y sm:divide-y-0 sm:divide-x divide-border overflow-auto">
        {/* Left panel - Settings */}
        <div className="w-full sm:w-1/3 p-4 overflow-y-auto">
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Template Name</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter template name" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="subject"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Subject Line</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter subject line" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="senderName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Sender Name</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter sender name" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="senderEmail"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Sender Email</FormLabel>
                    <FormControl>
                      <Input 
                        type="email" 
                        placeholder="Enter sender email" 
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <div>
                <h3 className="text-sm font-medium mb-1">Available Variables</h3>
                <div className="p-2 bg-secondary/50 rounded-md text-xs font-mono space-y-1">
                  <div><span className="text-primary">{"{{.FirstName}}"}</span> - Recipient's first name</div>
                  <div><span className="text-primary">{"{{.LastName}}"}</span> - Recipient's last name</div>
                  <div><span className="text-primary">{"{{.Email}}"}</span> - Recipient's email</div>
                  <div><span className="text-primary">{"{{.Position}}"}</span> - Recipient's job title</div>
                  <div><span className="text-primary">{"{{.TrackingURL}}"}</span> - Tracking URL</div>
                  <div><span className="text-primary">{"{{.SenderName}}"}</span> - Sender's name</div>
                </div>
              </div>
              
              <div className="flex space-x-2">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={handleImportHTML}
                  className="flex-1"
                >
                  <FolderInput className="mr-1 h-4 w-4" /> Import HTML
                </Button>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={handleExportHTML}
                  className="flex-1"
                >
                  <Download className="mr-1 h-4 w-4" /> Export HTML
                </Button>
              </div>
              
              <div className="pt-4">
                <Button 
                  type="submit" 
                  className="w-full" 
                  disabled={mutation.isPending}
                >
                  {mutation.isPending ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      {isEditing ? "Updating..." : "Creating..."}
                    </>
                  ) : (
                    isEditing ? "Update Template" : "Save Template"
                  )}
                </Button>
              </div>
            </form>
          </div>
        </div>
        
        {/* Right panel - Editor/Preview */}
        <div className="w-full sm:w-2/3 p-4 overflow-hidden flex flex-col">
          <Tabs defaultValue="editor" className="w-full">
            <TabsList className="mb-4">
              <TabsTrigger value="editor">Editor</TabsTrigger>
              <TabsTrigger value="preview">Preview</TabsTrigger>
            </TabsList>
            
            <TabsContent value="editor" className="flex-1">
              <div className="border border-border rounded-md overflow-hidden flex-1 flex flex-col h-[400px]">
                <div className="bg-secondary/50 border-b border-border flex">
                  <Button variant="ghost" size="sm">
                    <Bold className="h-4 w-4" />
                  </Button>
                  <Button variant="ghost" size="sm">
                    <Italic className="h-4 w-4" />
                  </Button>
                  <Button variant="ghost" size="sm">
                    <Underline className="h-4 w-4" />
                  </Button>
                  <Button variant="ghost" size="sm">
                    <Link className="h-4 w-4" />
                  </Button>
                  <Button variant="ghost" size="sm">
                    <Image className="h-4 w-4" />
                  </Button>
                </div>
                <FormField
                  control={form.control}
                  name="htmlContent"
                  render={({ field }) => (
                    <FormItem className="flex-1 h-full m-0 space-y-0">
                      <FormControl>
                        <textarea
                          className="flex-1 p-4 w-full h-full text-sm font-mono bg-background resize-none focus:outline-none border-0"
                          {...field}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
              </div>
            </TabsContent>
            
            <TabsContent value="preview" className="flex-1">
              <div className="border border-border rounded-md overflow-auto h-[400px] p-4 bg-white text-gray-900">
                <div dangerouslySetInnerHTML={{ __html: form.watch("htmlContent") }} />
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
}
